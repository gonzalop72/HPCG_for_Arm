Fujitsu C/C++ Version 4.7.0   Fri Dec 23 04:16:47 2022
Compilation information
  Current directory : /lustre/home/gapinzon/arm_code/HPCG_for_Arm/ookami_fj2
  Source file       : ../src/ComputeDotProduct_ref.cpp
(line-no.)(optimize)
        1             
        2             //@HEADER
        3             // ***************************************************
        4             //
        5             // HPCG: High Performance Conjugate Gradient Benchmark
        6             //
        7             // Contact:
        8             // Michael A. Heroux ( maherou@sandia.gov)
        9             // Jack Dongarra     (dongarra@eecs.utk.edu)
       10             // Piotr Luszczek    (luszczek@eecs.utk.edu)
       11             //
       12             // ***************************************************
       13             //@HEADER
       14             
       15             /*!
       16              @file ComputeDotProduct_ref.cpp
       17             
       18              HPCG routine
       19              */
       20             
       21             #ifndef HPCG_NO_MPI
       22             #include <mpi.h>
       23             #include "mytimer.hpp"
       24             #endif
       25             #ifndef HPCG_NO_OPENMP
       26             #include <omp.h>
       27             #endif
       28             #include <cassert>
       29             #include "ComputeDotProduct_ref.hpp"
       30             
       31             /*!
       32               Routine to compute the dot product of two vectors where:
       33             
       34               This is the reference dot-product implementation.  It _CANNOT_ be modified for the
       35               purposes of this benchmark.
       36             
       37               @param[in] n the number of vector elements (on this processor)
       38               @param[in] x, y the input vectors
       39               @param[in] result a pointer to scalar value, on exit will contain result.
       40               @param[out] time_allreduce the time it took to perform the communication between processes
       41             
       42               @return returns 0 upon success and non-zero otherwise
       43             
       44               @see ComputeDotProduct
       45             */
       46             int ComputeDotProduct_ref(const local_int_t n, const Vector & x, const Vector & y,
       47                 double & result, double & time_allreduce) {
       48               assert(x.localLength>=n); // Test vector lengths
       49               assert(y.localLength>=n);
       50             
       51               double local_result = 0.0;
       52               double * xv = x.values;
       53               double * yv = y.values;
       54               if (yv==xv) {
       55             #ifndef HPCG_NO_OPENMP
       56                 #pragma omp parallel for reduction (+:local_result)
       57             #endif
                       <<< Loop-information Start >>>
                       <<<  [OPTIMIZATION]
                       <<<    SIMD(VL: 8)
                       <<<    SOFTWARE PIPELINING(IPC: 2.71, ITR: 256, MVE: 2, POL: S)
                       <<<    PREFETCH(HARD) Expected by compiler :
                       <<<      (unknown)
                       <<< Loop-information  End >>>
       58   p     8v      for (local_int_t i=0; i<n; i++) local_result += xv[i]*xv[i];
       59               } else {
       60             #ifndef HPCG_NO_OPENMP
       61                 #pragma omp parallel for reduction (+:local_result)
       62             #endif
                       <<< Loop-information Start >>>
                       <<<  [OPTIMIZATION]
                       <<<    SIMD(VL: 8)
                       <<<    SOFTWARE PIPELINING(IPC: 1.75, ITR: 192, MVE: 2, POL: S)
                       <<<    PREFETCH(HARD) Expected by compiler :
                       <<<      (unknown)
                       <<< Loop-information  End >>>
       63   p     8v      for (local_int_t i=0; i<n; i++) local_result += xv[i]*yv[i];
       64               }
       65             
       66             #ifndef HPCG_NO_MPI
       67               // Use MPI's reduce function to collect all partial sums
       68               double t0 = mytimer();
       69               double global_result = 0.0;
       70               MPI_Allreduce(&local_result, &global_result, 1, MPI_DOUBLE, MPI_SUM,
       71                   MPI_COMM_WORLD);
       72               result = global_result;
       73               time_allreduce += mytimer() - t0;
       74             #else
       75               time_allreduce += 0.0;
       76               result = local_result;
       77             #endif
       78             
       79               return 0;
       80             }
Total prefetch num: 0
Optimization messages
  jwd6004s-i  "../src/ComputeDotProduct_ref.cpp", line 58: SIMD conversion is applied to this loop with the loop variable 'i'. The loop contains a reduction operation.
  jwd8208o-i  "../src/ComputeDotProduct_ref.cpp", line 58: Method of calculating sum or product is changed.
  jwd8204o-i  "../src/ComputeDotProduct_ref.cpp", line 58: This loop is software pipelined.
  jwd8205o-i  "../src/ComputeDotProduct_ref.cpp", line 58: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 256.
  jwd6004s-i  "../src/ComputeDotProduct_ref.cpp", line 63: SIMD conversion is applied to this loop with the loop variable 'i'. The loop contains a reduction operation.
  jwd8208o-i  "../src/ComputeDotProduct_ref.cpp", line 63: Method of calculating sum or product is changed.
  jwd8204o-i  "../src/ComputeDotProduct_ref.cpp", line 63: This loop is software pipelined.
  jwd8205o-i  "../src/ComputeDotProduct_ref.cpp", line 63: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
Statistics information
  Option information
    Command line options : -c -DHPCG_CONTIGUOUS_ARRAYS -DHPCG_NO_MPI -DENABLE_MG_COUNTERS -DENABLE_MG_COUNTERS -DHPCG_USE_SVE -I./src -I./src/OOKAMI_OMP_FJ -Kfast -KSVE -Kopenmp -Koptmsg=2 -Nlst=t -Kocl -I../src -o src/ComputeDotProduct_ref.o
    Effective options    : -g0 -mt -Qy -std=gnu++14 -x- -x=quick -O3 -Knoalias_const
                           -Kalign_loops -Knoarray_declaration_opt -Kassume=noshortloop
                           -Kassume=nomemory_bandwidth -Kassume=notime_saving_compilation
                           -Kcmodel=small -Keval -Keval_noconcurrent
                           -Knoextract_stride_store -Kfast_matmul -Knofenv_access
                           -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                           -Kilfunc=procedure -Klargepage -Klib -Kloop_blocking
                           -Kloop_fission -Kloop_nofission_stripmining
                           -Kloop_fission_threshold=50 -Kloop_fusion -Kloop_interchange
                           -Kloop_part_simd -Kloop_perfect_nest -Kloop_noversioning
                           -Klooptype=f -Knomemalias -Kmfunc=1 -Kocl -Komitfp -Kopenmp
                           -Kopenmp_noassume_norecurrence
                           -Kopenmp_nocollapse_except_innermost
                           -Kopenmp_loop_variable=private -Kopenmp_noordered_reduction
                           -Knoopenmp_simd -Knooptlib_string -Koptmsg=2
                           -Knopc_relative_literal_loads -Knoparallel
                           -Kparallel_nofp_precision -Knopreex -Kprefetch_cache_level=all
                           -Kprefetch_noconditional -Kprefetch_noindirect -Kprefetch_noinfer
                           -Kprefetch_sequential=auto -Kprefetch_nostride -Kprefetch_strong
                           -Kprefetch_strong_L2 -Knopreload -Krdconv=1
                           -Kremove_inlinefunction -Knorestp -Ksch_post_ra -Ksch_pre_ra
                           -Ksibling_calls -Ksimd=auto -Ksimd_packed_promotion
                           -Ksimd_reduction_product -Ksimd_reg_size=512
                           -Ksimd_nouncounted_loop -Ksimd_use_multiple_structures
                           -Knostrict_aliasing -Knostriping -KA64FX -KARMV8_3_A -KSVE -Kswp
                           -Kswp_freg_rate=100 -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                           -Kswp_policy=auto -Kunroll -Knounroll_and_jam -Knozfill
                           -Ncancel_overtime_compilation -Nnocoverage -Nexceptions -Nnofjcex
                           -Nfjprof -Nnohook_func -Nnohook_time -Nlibomp -Nline -Nlst=p
                           -Nlst=t -Nquickdbg=noheapchk -Nquickdbg=nosubchk -NRnotrap
                           -Nnoreordered_variable_stack -Nrt_notune -Nsetvalue=noheap
                           -Nsetvalue=nostack -Nsetvalue=noscalar -Nsetvalue=noarray
                           -Nsetvalue=nostruct -Nsrc -Nsta
