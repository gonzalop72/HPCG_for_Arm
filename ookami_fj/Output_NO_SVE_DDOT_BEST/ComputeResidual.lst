Fujitsu C/C++ Version 4.7.0   Wed Nov  2 15:46:03 2022
Compilation information
  Current directory : /lustre/home/gapinzon/arm_code/HPCG_for_Arm/ookami_fj
  Source file       : ../src/ComputeResidual.cpp
(line-no.)(optimize)
        1             
        2             //@HEADER
        3             // ***************************************************
        4             //
        5             // HPCG: High Performance Conjugate Gradient Benchmark
        6             //
        7             // Contact:
        8             // Michael A. Heroux ( maherou@sandia.gov)
        9             // Jack Dongarra     (dongarra@eecs.utk.edu)
       10             // Piotr Luszczek    (luszczek@eecs.utk.edu)
       11             //
       12             // ***************************************************
       13             //@HEADER
       14             
       15             /*!
       16              @file ComputeResidual.cpp
       17             
       18              HPCG routine
       19              */
       20             #ifndef HPCG_NO_MPI
       21             #include <mpi.h>
       22             #endif
       23             #ifndef HPCG_NO_OPENMP
       24             #include <omp.h>
       25             #endif
       26             
       27             #include "Vector.hpp"
       28             
       29             #ifdef HPCG_DETAILED_DEBUG
       30             #include <fstream>
       31             #include "hpcg.hpp"
       32             #endif
       33             
       34             #include <cmath>  // needed for fabs
       35             #include "ComputeResidual.hpp"
       36             #ifdef HPCG_DETAILED_DEBUG
       37             #include <iostream>
       38             #endif
       39             
       40             /*!
       41               Routine to compute the inf-norm difference between two vectors where:
       42             
       43               @param[in]  n        number of vector elements (local to this processor)
       44               @param[in]  v1, v2   input vectors
       45               @param[out] residual pointer to scalar value; on exit, will contain result: inf-norm difference
       46             
       47               @return Returns zero on success and a non-zero value otherwise.
       48             */
       49             int ComputeResidual(const local_int_t n, const Vector & v1, const Vector & v2, double & residual) {
       50             
       51               double * v1v = v1.values;
       52               double * v2v = v2.values;
       53               double local_residual = 0.0;
       54             
       55             #ifndef HPCG_NO_OPENMP
       56               #pragma omp parallel default(none) shared(local_residual, v1v, v2v, n)
       57               {
       58                 double threadlocal_residual = 0.0;
                       <<< Loop-information Start >>>
                       <<<  [OPTIMIZATION]
                       <<<    SIMD(VL: AGNOSTIC; VL: 2 in 128-bit Interleave: 1)
                       <<< Loop-information End >>>
       59          v      #pragma omp for
       60                 for (local_int_t i=0; i<n; i++) {
       61                   double diff = std::fabs(v1v[i] - v2v[i]);
       62                   if (diff > threadlocal_residual) threadlocal_residual = diff;
       63                 }
       64                 #pragma omp critical
       65                 {
       66                   if (threadlocal_residual>local_residual) local_residual = threadlocal_residual;
       67                 }
       68               }
       69             #else // No threading
       70               for (local_int_t i=0; i<n; i++) {
       71                 double diff = std::fabs(v1v[i] - v2v[i]);
       72                 if (diff > local_residual) local_residual = diff;
       73             #ifdef HPCG_DETAILED_DEBUG
       74                 HPCG_fout << " Computed, exact, diff = " << v1v[i] << " " << v2v[i] << " " << diff << std::endl;
       75             #endif
       76               }
       77             #endif
       78             
       79             #ifndef HPCG_NO_MPI
       80               // Use MPI's reduce function to collect all partial sums
       81               double global_residual = 0;
       82               MPI_Allreduce(&local_residual, &global_residual, 1, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);
       83               residual = global_residual;
       84             #else
       85               residual = local_residual;
       86             #endif
       87             
       88               return 0;
       89             }
