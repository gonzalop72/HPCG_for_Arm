Fujitsu C/C++ Version 4.7.0   Fri Nov 11 03:47:51 2022
Compilation information
  Current directory : /lustre/home/gapinzon/arm_code/HPCG_for_Arm/ookami_fj
  Source file       : ../src/ReportResults.cpp
(line-no.)(optimize)
        1             /*
        2              *
        3              *  SPDX-License-Identifier: Apache-2.0
        4              *
        5              *  Copyright (C) 2019, Arm Limited and contributors
        6              *
        7              *  Licensed under the Apache License, Version 2.0 (the "License");
        8              *  you may not use this file except in compliance with the License.
        9              *  You may obtain a copy of the License at
       10              *
       11              *      http://www.apache.org/licenses/LICENSE-2.0
       12              *
       13              *  Unless required by applicable law or agreed to in writing, software
       14              *  distributed under the License is distributed on an "AS IS" BASIS,
       15              *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       16              *  See the License for the specific language governing permissions and
       17              *  limitations under the License.
       18              *
       19              */
       20             
       21             
       22             //@HEADER
       23             // ***************************************************
       24             //
       25             // HPCG: High Performance Conjugate Gradient Benchmark
       26             //
       27             // Contact:
       28             // Michael A. Heroux ( maherou@sandia.gov)
       29             // Jack Dongarra     (dongarra@eecs.utk.edu)
       30             // Piotr Luszczek    (luszczek@eecs.utk.edu)
       31             //
       32             // ***************************************************
       33             //@HEADER
       34             
       35             /*!
       36              @file ReportResults.cpp
       37             
       38              HPCG routine
       39              */
       40             
       41             #ifndef HPCG_NO_MPI
       42             #include <mpi.h>
       43             #endif
       44             
       45             #include <vector>
       46             #include <unistd.h>
       47             #include "ReportResults.hpp"
       48             #include "OutputFile.hpp"
       49             #include "OptimizeProblem.hpp"
       50             
       51             #ifdef HPCG_DEBUG
       52             #include <fstream>
       53             using std::endl;
       54             
       55             #include "hpcg.hpp"
       56             #endif
       57             
       58             #include "ReportFunctions.hpp"
       59             
       60             /*!
       61              Creates a YAML file and writes the information about the HPCG run, its results, and validity.
       62             
       63               @param[in] geom The description of the problem's geometry.
       64               @param[in] A    The known system matrix
       65               @param[in] numberOfMgLevels Number of levels in multigrid V cycle
       66               @param[in] numberOfCgSets Number of CG runs performed
       67               @param[in] niters Number of preconditioned CG iterations performed to lower the residual below a threshold
       68               @param[in] times  Vector of cumulative timings for each of the phases of a preconditioned CG iteration
       69               @param[in] testcg_data    the data structure with the results of the CG-correctness test including pass/fail information
       70               @param[in] testsymmetry_data the data structure with the results of the CG symmetry test including pass/fail information
       71               @param[in] testnorms_data the data structure with the results of the CG norm test including pass/fail information
       72               @param[in] global_failure indicates whether a failure occurred during the correctness tests of CG
       73             
       74               @see YAML_Doc
       75             */
       76             void ReportResults(const SparseMatrix & A, int numberOfMgLevels, int numberOfCgSets, int refMaxIters,int optMaxIters, double times[],
       77                 const TestCGData & testcg_data, const TestSymmetryData & testsymmetry_data, const TestNormsData & testnorms_data, int global_failure, bool quickPath) {
       78             
       79               double minOfficialTime = 1800; // Any official benchmark result must run at least this many seconds
       80             
       81             #ifndef HPCG_NO_MPI
       82               double t4 = times[4];
       83               double t4min = 0.0;
       84               double t4max = 0.0;
       85               double t4avg = 0.0;
       86               MPI_Allreduce(&t4, &t4min, 1, MPI_DOUBLE, MPI_MIN, MPI_COMM_WORLD);
       87               MPI_Allreduce(&t4, &t4max, 1, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);
       88               MPI_Allreduce(&t4, &t4avg, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
       89               t4avg = t4avg/((double) A.geom->size);
       90             #endif
       91             
       92               if (A.geom->rank==0) { // Only PE 0 needs to compute and report timing results
       93             
       94                 // TODO: Put the FLOP count, Memory BW and Memory Usage models into separate functions
       95             
       96                 // ======================== FLOP count model =======================================
       97             
       98                 double fNumberOfCgSets = numberOfCgSets;
       99                 double fniters = fNumberOfCgSets * (double) optMaxIters;
      100                 double fnrow = A.totalNumberOfRows;
      101                 double fnnz = A.totalNumberOfNonzeros;
      102             
      103                 // Op counts come from implementation of CG in CG.cpp (include 1 extra for the CG preamble ops)
      104                 double fnops_ddot = (3.0*fniters+fNumberOfCgSets)*2.0*fnrow; // 3 ddots with nrow adds and nrow mults
      105                 double fnops_waxpby = (3.0*fniters+fNumberOfCgSets)*2.0*fnrow; // 3 WAXPBYs with nrow adds and nrow mults
      106                 double fnops_sparsemv = (fniters+fNumberOfCgSets)*2.0*fnnz; // 1 SpMV with nnz adds and nnz mults
      107                 // Op counts from the multigrid preconditioners
      108                 double fnops_precond = 0.0;
      109                 const SparseMatrix * Af = &A;
      110         4       for (int i=1; i<numberOfMgLevels; ++i) {
      111          s        double fnnz_Af = Af->totalNumberOfNonzeros;
      112                   double fnumberOfPresmootherSteps = Af->mgData->numberOfPresmootherSteps;
      113                   double fnumberOfPostsmootherSteps = Af->mgData->numberOfPostsmootherSteps;
      114                   fnops_precond += fnumberOfPresmootherSteps*fniters*4.0*fnnz_Af; // number of presmoother flops
      115                   fnops_precond += fniters*2.0*fnnz_Af; // cost of fine grid residual calculation
      116                   fnops_precond += fnumberOfPostsmootherSteps*fniters*4.0*fnnz_Af;  // number of postsmoother flops
      117                   Af = Af->Ac; // Go to next coarse level
      118                 }
      119             
      120                 fnops_precond += fniters*4.0*((double) Af->totalNumberOfNonzeros); // One symmetric GS sweep at the coarsest level
      121                 double fnops = fnops_ddot+fnops_waxpby+fnops_sparsemv+fnops_precond;
      122                 double frefnops = fnops * ((double) refMaxIters)/((double) optMaxIters);
      123             
      124                 // ======================== Memory bandwidth model =======================================
      125             
      126                 // Read/Write counts come from implementation of CG in CG.cpp (include 1 extra for the CG preamble ops)
      127                 double fnreads_ddot = (3.0*fniters+fNumberOfCgSets)*2.0*fnrow*sizeof(double); // 3 ddots with 2 nrow reads
      128                 double fnwrites_ddot = (3.0*fniters+fNumberOfCgSets)*sizeof(double); // 3 ddots with 1 write
      129                 double fnreads_waxpby = (3.0*fniters+fNumberOfCgSets)*2.0*fnrow*sizeof(double); // 3 WAXPBYs with nrow adds and nrow mults
      130                 double fnwrites_waxpby = (3.0*fniters+fNumberOfCgSets)*fnrow*sizeof(double); // 3 WAXPBYs with nrow adds and nrow mults
      131                 double fnreads_sparsemv = (fniters+fNumberOfCgSets)*(fnnz*(sizeof(double)+sizeof(local_int_t)) + fnrow*sizeof(double));// 1 SpMV with nnz reads of values, nnz reads indices,
      132                 // plus nrow reads of x
      133                 double fnwrites_sparsemv = (fniters+fNumberOfCgSets)*fnrow*sizeof(double); // 1 SpMV nrow writes
      134                 // Op counts from the multigrid preconditioners
      135                 double fnreads_precond = 0.0;
      136                 double fnwrites_precond = 0.0;
      137                 Af = &A;
      138         4s      for (int i=1; i<numberOfMgLevels; ++i) {
      139                   double fnnz_Af = Af->totalNumberOfNonzeros;
      140                   double fnrow_Af = Af->totalNumberOfRows;
      141                   double fnumberOfPresmootherSteps = Af->mgData->numberOfPresmootherSteps;
      142                   double fnumberOfPostsmootherSteps = Af->mgData->numberOfPostsmootherSteps;
      143                   fnreads_precond += fnumberOfPresmootherSteps*fniters*(2.0*fnnz_Af*(sizeof(double)+sizeof(local_int_t)) + fnrow_Af*sizeof(double)); // number of presmoother reads
      144                   fnwrites_precond += fnumberOfPresmootherSteps*fniters*fnrow_Af*sizeof(double); // number of presmoother writes
      145                   fnreads_precond += fniters*(fnnz_Af*(sizeof(double)+sizeof(local_int_t)) + fnrow_Af*sizeof(double)); // Number of reads for fine grid residual calculation
      146                   fnwrites_precond += fniters*fnnz_Af*sizeof(double); // Number of writes for fine grid residual calculation
      147                   fnreads_precond += fnumberOfPostsmootherSteps*fniters*(2.0*fnnz_Af*(sizeof(double)+sizeof(local_int_t)) + fnrow_Af*sizeof(double));  // number of postsmoother reads
      148                   fnwrites_precond += fnumberOfPostsmootherSteps*fniters*fnnz_Af*sizeof(double);  // number of postsmoother writes
      149                   Af = Af->Ac; // Go to next coarse level
      150                 }
      151             
      152                 double fnnz_Af = Af->totalNumberOfNonzeros;
      153                 double fnrow_Af = Af->totalNumberOfRows;
      154                 fnreads_precond += fniters*(2.0*fnnz_Af*(sizeof(double)+sizeof(local_int_t)) + fnrow_Af*sizeof(double));; // One symmetric GS sweep at the coarsest level
      155                 fnwrites_precond += fniters*fnrow_Af*sizeof(double); // One symmetric GS sweep at the coarsest level
      156                 double fnreads = fnreads_ddot+fnreads_waxpby+fnreads_sparsemv+fnreads_precond;
      157                 double fnwrites = fnwrites_ddot+fnwrites_waxpby+fnwrites_sparsemv+fnwrites_precond;
      158                 double frefnreads = fnreads * ((double) refMaxIters)/((double) optMaxIters);
      159                 double frefnwrites = fnwrites * ((double) refMaxIters)/((double) optMaxIters);
      160             
      161             
      162                 // ======================== Memory usage model =======================================
      163             
      164                 // Data in GenerateProblem_ref
      165             
      166                 double numberOfNonzerosPerRow = 27.0; // We are approximating a 27-point finite element/volume/difference 3D stencil
      167                 double size = ((double) A.geom->size); // Needed for estimating size of halo
      168             
      169                 double fnbytes = ((double) sizeof(Geometry));      // Geometry struct in main.cpp
      170                 fnbytes += ((double) sizeof(double)*fNumberOfCgSets); // testnorms_data in main.cpp
      171             
      172                 // Model for GenerateProblem_ref.cpp
      173                 fnbytes += fnrow*sizeof(char);      // array nonzerosInRow
      174                 fnbytes += fnrow*((double) sizeof(global_int_t*)); // mtxIndG
      175                 fnbytes += fnrow*((double) sizeof(local_int_t*));  // mtxIndL
      176                 fnbytes += fnrow*((double) sizeof(double*));      // matrixValues
      177                 fnbytes += fnrow*((double) sizeof(double*));      // matrixDiagonal
      178                 fnbytes += fnrow*numberOfNonzerosPerRow*((double) sizeof(local_int_t));  // mtxIndL[1..nrows]
      179                 fnbytes += fnrow*numberOfNonzerosPerRow*((double) sizeof(double));       // matrixValues[1..nrows]
      180                 fnbytes += fnrow*numberOfNonzerosPerRow*((double) sizeof(global_int_t)); // mtxIndG[1..nrows]
      181                 fnbytes += fnrow*((double) 3*sizeof(double)); // x, b, xexact
      182             
      183                 // Model for CGData.hpp
      184                 double fncol = ((global_int_t) A.localNumberOfColumns) * size; // Estimate of the global number of columns using the value from rank 0
      185                 fnbytes += fnrow*((double) 2*sizeof(double)); // r, Ap
      186                 fnbytes += fncol*((double) 2*sizeof(double)); // z, p
      187             
      188    i            std::vector<double> fnbytesPerLevel(numberOfMgLevels); // Count byte usage per level (level 0 is main CG level)
      189    i            fnbytesPerLevel[0] = fnbytes;
      190             
      191                 // Benchmarker-provided model for OptimizeProblem.cpp
      192                 double fnbytes_OptimizedProblem = OptimizeProblemMemoryUse(A);
      193                 fnbytes += fnbytes_OptimizedProblem;
      194             
      195                 Af = A.Ac;
      196         8s      for (int i=1; i<numberOfMgLevels; ++i) {
      197                   double fnrow_Af = Af->totalNumberOfRows;
      198                   double fncol_Af = ((global_int_t) Af->localNumberOfColumns) * size; // Estimate of the global number of columns using the value from rank 0
      199                   double fnbytes_Af = 0.0;
      200                   // Model for GenerateCoarseProblem.cpp
      201                   fnbytes_Af += fnrow_Af*((double) sizeof(local_int_t)); // f2cOperator
      202                   fnbytes_Af += fnrow_Af*((double) sizeof(double)); // rc
      203                   fnbytes_Af += 2.0*fncol_Af*((double) sizeof(double)); // xc, Axf are estimated based on the size of these arrays on rank 0
      204                   fnbytes_Af += ((double) (sizeof(Geometry)+sizeof(SparseMatrix)+3*sizeof(Vector)+sizeof(MGData))); // Account for structs geomc, Ac, rc, xc, Axf - (minor)
      205             
      206                   // Model for GenerateProblem.cpp (called within GenerateCoarseProblem.cpp)
      207                   fnbytes_Af += fnrow_Af*sizeof(char);      // array nonzerosInRow
      208                   fnbytes_Af += fnrow_Af*((double) sizeof(global_int_t*)); // mtxIndG
      209                   fnbytes_Af += fnrow_Af*((double) sizeof(local_int_t*));  // mtxIndL
      210                   fnbytes_Af += fnrow_Af*((double) sizeof(double*));      // matrixValues
      211                   fnbytes_Af += fnrow_Af*((double) sizeof(double*));      // matrixDiagonal
      212                   fnbytes_Af += fnrow_Af*numberOfNonzerosPerRow*((double) sizeof(local_int_t));  // mtxIndL[1..nrows]
      213                   fnbytes_Af += fnrow_Af*numberOfNonzerosPerRow*((double) sizeof(double));       // matrixValues[1..nrows]
      214                   fnbytes_Af += fnrow_Af*numberOfNonzerosPerRow*((double) sizeof(global_int_t)); // mtxIndG[1..nrows]
      215             
      216                   // Model for SetupHalo_ref.cpp
      217             #ifndef HPCG_NO_MPI
      218                   fnbytes_Af += ((double) sizeof(double)*Af->totalToBeSent); //sendBuffer
      219                   fnbytes_Af += ((double) sizeof(local_int_t)*Af->totalToBeSent); // elementsToSend
      220                   fnbytes_Af += ((double) sizeof(int)*Af->numberOfSendNeighbors); // neighbors
      221                   fnbytes_Af += ((double) sizeof(local_int_t)*Af->numberOfSendNeighbors); // receiveLength, sendLength
      222             #endif
      223    i              fnbytesPerLevel[i] = fnbytes_Af;
      224                   fnbytes += fnbytes_Af; // Running sum
      225                   Af = Af->Ac; // Go to next coarse level
      226                 }
      227             
      228                 assert(Af==0); // Make sure we got to the lowest grid level
      229             
      230                 // Count number of bytes used per equation
      231                 double fnbytesPerEquation = fnbytes/fnrow;
      232             
      233                 // Instantiate YAML document
      234             	char execConf[128];
      235             	char hostname[128];
      236             	gethostname(hostname, 64);
      237             	sprintf(execConf, "%s-%dranks-%dthreads", hostname, A.geom->size, A.geom->numThreads);
      238    i        	OutputFile doc(execConf, "HPCG-Benchmark_3.0");
      239    i            doc.add("Release date", "November 11, 2015");
      240             
      241    i            doc.add("Machine Summary","");
      242    i            doc.get("Machine Summary")->add("Distributed Processes",A.geom->size);
      243    i            doc.get("Machine Summary")->add("Threads per processes",A.geom->numThreads);
      244             
      245    i            doc.add("Global Problem Dimensions","");
      246    i            doc.get("Global Problem Dimensions")->add("Global nx",A.geom->gnx);
      247    i            doc.get("Global Problem Dimensions")->add("Global ny",A.geom->gny);
      248    i            doc.get("Global Problem Dimensions")->add("Global nz",A.geom->gnz);
      249             
      250    i            doc.add("Processor Dimensions","");
      251    i            doc.get("Processor Dimensions")->add("npx",A.geom->npx);
      252    i            doc.get("Processor Dimensions")->add("npy",A.geom->npy);
      253    i            doc.get("Processor Dimensions")->add("npz",A.geom->npz);
      254             
      255    i            doc.add("Local Domain Dimensions","");
      256    i            doc.get("Local Domain Dimensions")->add("nx",A.geom->nx);
      257    i            doc.get("Local Domain Dimensions")->add("ny",A.geom->ny);
      258             
      259                 int ipartz_ids = 0;
                       <<< Loop-information Start >>>
                       <<<  [OPTIMIZATION]
                       <<<    SPILLS :
                       <<<      GENERAL   : SPILL 0  FILL 1
                       <<<      SIMD&FP   : SPILL 0  FILL 3
                       <<<      SCALABLE  : SPILL 0  FILL 0
                       <<<      PREDICATE : SPILL 0  FILL 0
                       <<< Loop-information End >>>
      260          s      for (int i=0; i< A.geom->npartz; ++i) {
      261    i              doc.get("Local Domain Dimensions")->add("Lower ipz", ipartz_ids);
      262    i              doc.get("Local Domain Dimensions")->add("Upper ipz", A.geom->partz_ids[i]-1);
      263    i              doc.get("Local Domain Dimensions")->add("nz",A.geom->partz_nz[i]);
      264                   ipartz_ids = A.geom->partz_ids[i];
      265                 }
      266             
      267             
      268    i            doc.add("########## Problem Summary  ##########","");
      269             
      270    i            doc.add("Setup Information","");
      271    i            doc.get("Setup Information")->add("Setup Time",times[9]);
      272             
      273    i            doc.add("Linear System Information","");
      274    i            doc.get("Linear System Information")->add("Number of Equations",A.totalNumberOfRows);
      275    i            doc.get("Linear System Information")->add("Number of Nonzero Terms",A.totalNumberOfNonzeros);
      276             
      277    i            doc.add("Multigrid Information","");
      278    i            doc.get("Multigrid Information")->add("Number of coarse grid levels", numberOfMgLevels-1);
      279                 Af = &A;
      280    i            doc.get("Multigrid Information")->add("Coarse Grids","");
                       <<< Loop-information Start >>>
                       <<<  [OPTIMIZATION]
                       <<<    SPILLS :
                       <<<      GENERAL   : SPILL 0  FILL 2
                       <<<      SIMD&FP   : SPILL 0  FILL 7
                       <<<      SCALABLE  : SPILL 0  FILL 0
                       <<<      PREDICATE : SPILL 0  FILL 0
                       <<< Loop-information End >>>
      281          s      for (int i=1; i<numberOfMgLevels; ++i) {
      282    i              doc.get("Multigrid Information")->get("Coarse Grids")->add("Grid Level",i);
      283    i              doc.get("Multigrid Information")->get("Coarse Grids")->add("Number of Equations",Af->Ac->totalNumberOfRows);
      284    i              doc.get("Multigrid Information")->get("Coarse Grids")->add("Number of Nonzero Terms",Af->Ac->totalNumberOfNonzeros);
      285    i              doc.get("Multigrid Information")->get("Coarse Grids")->add("Number of Presmoother Steps",Af->mgData->numberOfPresmootherSteps);
      286    i              doc.get("Multigrid Information")->get("Coarse Grids")->add("Number of Postsmoother Steps",Af->mgData->numberOfPostsmootherSteps);
      287                   Af = Af->Ac;
      288                 }
      289             
      290    i            doc.add("########## Memory Use Summary  ##########","");
      291             
      292    i            doc.add("Memory Use Information","");
      293    i            doc.get("Memory Use Information")->add("Total memory used for data (Gbytes)",fnbytes/1000000000.0);
      294    i            doc.get("Memory Use Information")->add("Memory used for OptimizeProblem data (Gbytes)",fnbytes_OptimizedProblem/1000000000.0);
      295    i            doc.get("Memory Use Information")->add("Bytes per equation (Total memory / Number of Equations)",fnbytesPerEquation);
      296             
      297    i            doc.get("Memory Use Information")->add("Memory used for linear system and CG (Gbytes)",fnbytesPerLevel[0]/1000000000.0);
      298             
      299    i            doc.get("Memory Use Information")->add("Coarse Grids","");
                       <<< Loop-information Start >>>
                       <<<  [OPTIMIZATION]
                       <<<    SPILLS :
                       <<<      GENERAL   : SPILL 0  FILL 2
                       <<<      SIMD&FP   : SPILL 0  FILL 2
                       <<<      SCALABLE  : SPILL 0  FILL 0
                       <<<      PREDICATE : SPILL 0  FILL 0
                       <<< Loop-information End >>>
      300          s      for (int i=1; i<numberOfMgLevels; ++i) {
      301    i              doc.get("Memory Use Information")->get("Coarse Grids")->add("Grid Level",i);
      302    i              doc.get("Memory Use Information")->get("Coarse Grids")->add("Memory used",fnbytesPerLevel[i]/1000000000.0);
      303                 }
      304             
      305    i            doc.add("########## V&V Testing Summary  ##########","");
      306    i            doc.add("Spectral Convergence Tests","");
      307                 if (testcg_data.count_fail==0)
      308    i              doc.get("Spectral Convergence Tests")->add("Result", "PASSED");
      309                 else
      310    i              doc.get("Spectral Convergence Tests")->add("Result", "FAILED");
      311    i            doc.get("Spectral Convergence Tests")->add("Unpreconditioned","");
      312    i            doc.get("Spectral Convergence Tests")->get("Unpreconditioned")->add("Maximum iteration count", testcg_data.niters_max_no_prec);
      313    i            doc.get("Spectral Convergence Tests")->get("Unpreconditioned")->add("Expected iteration count", testcg_data.expected_niters_no_prec);
      314    i            doc.get("Spectral Convergence Tests")->add("Preconditioned","");
      315    i            doc.get("Spectral Convergence Tests")->get("Preconditioned")->add("Maximum iteration count", testcg_data.niters_max_prec);
      316    i            doc.get("Spectral Convergence Tests")->get("Preconditioned")->add("Expected iteration count", testcg_data.expected_niters_prec);
      317             
      318                 const char DepartureFromSymmetry[] = "Departure from Symmetry |x'Ay-y'Ax|/(2*||x||*||A||*||y||)/epsilon";
      319    i            doc.add(DepartureFromSymmetry,"");
      320                 if (testsymmetry_data.count_fail==0)
      321    i              doc.get(DepartureFromSymmetry)->add("Result", "PASSED");
      322                 else
      323    i              doc.get(DepartureFromSymmetry)->add("Result", "FAILED");
      324    i            doc.get(DepartureFromSymmetry)->add("Departure for SpMV", testsymmetry_data.depsym_spmv);
      325    i            doc.get(DepartureFromSymmetry)->add("Departure for MG", testsymmetry_data.depsym_mg);
      326             
      327    i            doc.add("########## Iterations Summary  ##########","");
      328    i            doc.add("Iteration Count Information","");
      329                 if (!global_failure)
      330    i              doc.get("Iteration Count Information")->add("Result", "PASSED");
      331                 else
      332    i              doc.get("Iteration Count Information")->add("Result", "FAILED");
      333    i            doc.get("Iteration Count Information")->add("Reference CG iterations per set", refMaxIters);
      334    i            doc.get("Iteration Count Information")->add("Optimized CG iterations per set", optMaxIters);
      335    i            doc.get("Iteration Count Information")->add("Total number of reference iterations", refMaxIters*numberOfCgSets);
      336    i            doc.get("Iteration Count Information")->add("Total number of optimized iterations", optMaxIters*numberOfCgSets);
      337             
      338    i            doc.add("########## Reproducibility Summary  ##########","");
      339    i            doc.add("Reproducibility Information","");
      340                 if (testnorms_data.pass)
      341    i              doc.get("Reproducibility Information")->add("Result", "PASSED");
      342                 else
      343    i              doc.get("Reproducibility Information")->add("Result", "FAILED");
      344    i            doc.get("Reproducibility Information")->add("Scaled residual mean", testnorms_data.mean);
      345    i            doc.get("Reproducibility Information")->add("Scaled residual variance", testnorms_data.variance);
      346             
      347    i            doc.add("########## Performance Summary (times in sec) ##########","");
      348             
      349    i            doc.add("Benchmark Time Summary","");
      350    i            doc.get("Benchmark Time Summary")->add("Optimization phase",times[7]);
      351    i            doc.get("Benchmark Time Summary")->add("DDOT",times[1]);
      352    i            doc.get("Benchmark Time Summary")->add("WAXPBY",times[2]);
      353    i            doc.get("Benchmark Time Summary")->add("SpMV",times[3]);
      354    i            doc.get("Benchmark Time Summary")->add("MG",times[5]);
      355    i            doc.get("Benchmark Time Summary")->add("Total",times[0]);
      356             
      357    i            doc.add("Floating Point Operations Summary","");
      358    i            doc.get("Floating Point Operations Summary")->add("Raw DDOT",fnops_ddot);
      359    i            doc.get("Floating Point Operations Summary")->add("Raw WAXPBY",fnops_waxpby);
      360    i            doc.get("Floating Point Operations Summary")->add("Raw SpMV",fnops_sparsemv);
      361    i            doc.get("Floating Point Operations Summary")->add("Raw MG",fnops_precond);
      362    i            doc.get("Floating Point Operations Summary")->add("Total",fnops);
      363    i            doc.get("Floating Point Operations Summary")->add("Total with convergence overhead",frefnops);
      364             
      365    i            doc.add("GB/s Summary","");
      366    i            doc.get("GB/s Summary")->add("Raw Read B/W",fnreads/times[0]/1.0E9);
      367    i            doc.get("GB/s Summary")->add("Raw Write B/W",fnwrites/times[0]/1.0E9);
      368    i            doc.get("GB/s Summary")->add("Raw Total B/W",(fnreads+fnwrites)/(times[0])/1.0E9);
      369    i            doc.get("GB/s Summary")->add("Total with convergence and optimization phase overhead",(frefnreads+frefnwrites)/(times[0]+fNumberOfCgSets*(times[7]/10.0+times[9]/10.0))/1.0E9);
      370             
      371             
      372    i            doc.add("GFLOP/s Summary","");
      373    i            doc.get("GFLOP/s Summary")->add("Raw DDOT",fnops_ddot/times[1]/1.0E9);
      374    i            doc.get("GFLOP/s Summary")->add("Raw WAXPBY",fnops_waxpby/times[2]/1.0E9);
      375    i            doc.get("GFLOP/s Summary")->add("Raw SpMV",fnops_sparsemv/(times[3])/1.0E9);
      376    i            doc.get("GFLOP/s Summary")->add("Raw MG",fnops_precond/(times[5])/1.0E9);
      377    i            doc.get("GFLOP/s Summary")->add("Raw Total",fnops/times[0]/1.0E9);
      378    i            doc.get("GFLOP/s Summary")->add("Total with convergence overhead",frefnops/times[0]/1.0E9);
      379                 // This final GFLOP/s rating includes the overhead of problem setup and optimizing the data structures vs ten sets of 50 iterations of CG
      380                 double totalGflops = frefnops/(times[0]+fNumberOfCgSets*(times[7]/10.0+times[9]/10.0))/1.0E9;
      381                 double totalGflops24 = frefnops/(times[0]+fNumberOfCgSets*times[7]/10.0)/1.0E9;
      382    i            doc.get("GFLOP/s Summary")->add("Total with convergence and optimization phase overhead",totalGflops);
      383             
      384    i            doc.add("User Optimization Overheads","");
      385    i            doc.get("User Optimization Overheads")->add("Optimization phase time (sec)", (times[7]));
      386    i            doc.get("User Optimization Overheads")->add("Optimization phase time vs reference SpMV+MG time", times[7]/times[8]);
      387             
      388             #ifndef HPCG_NO_MPI
      389                 doc.add("DDOT Timing Variations","");
      390                 doc.get("DDOT Timing Variations")->add("Min DDOT MPI_Allreduce time",t4min);
      391                 doc.get("DDOT Timing Variations")->add("Max DDOT MPI_Allreduce time",t4max);
      392                 doc.get("DDOT Timing Variations")->add("Avg DDOT MPI_Allreduce time",t4avg);
      393             
      394                 //doc.get("Sparse Operations Overheads")->add("Halo exchange time (sec)", (times[6]));
      395                 //doc.get("Sparse Operations Overheads")->add("Halo exchange as percentage of SpMV time", (times[6])/totalSparseMVTime*100.0);
      396             #endif
      397    i            doc.add("Final Summary","");
      398                 bool isValidRun = (testcg_data.count_fail==0) && (testsymmetry_data.count_fail==0) && (testnorms_data.pass) && (!global_failure);
      399             #ifdef HPCG_USE_FUSED_SYMGS_SPMV
      400             	isValidRun = false;
      401             #endif
      402                 if (isValidRun) {
      403    i              doc.get("Final Summary")->add("HPCG result is VALID with a GFLOP/s rating of", totalGflops);
      404    i              doc.get("Final Summary")->add("HPCG 2.4 rating for historical reasons is", totalGflops24);
      405                   if (!A.isDotProductOptimized) {
      406    i                doc.get("Final Summary")->add("Reference version of ComputeDotProduct used","Performance results are most likely suboptimal");
      407                   }
      408                   if (!A.isSpmvOptimized) {
      409    i                doc.get("Final Summary")->add("Reference version of ComputeSPMV used","Performance results are most likely suboptimal");
      410                   }
      411                   if (!A.isMgOptimized) {
      412                     if (A.geom->numThreads>1)
      413    i                  doc.get("Final Summary")->add("Reference version of ComputeMG used and number of threads greater than 1","Performance results are severely suboptimal");
      414                     else // numThreads ==1
      415    i                  doc.get("Final Summary")->add("Reference version of ComputeMG used","Performance results are most likely suboptimal");
      416                   }
      417                   if (!A.isWaxpbyOptimized) {
      418    i                doc.get("Final Summary")->add("Reference version of ComputeWAXPBY used","Performance results are most likely suboptimal");
      419                   }
      420                   if (times[0]>=minOfficialTime) {
      421    i                doc.get("Final Summary")->add("Please upload results from the YAML file contents to","http://hpcg-benchmark.org");
      422                   }
      423                   else {
      424    i                doc.get("Final Summary")->add("Results are valid but execution time (sec) is",times[0]);
      425                     if (quickPath) {
      426    i                  doc.get("Final Summary")->add("You have selected the QuickPath option", "Results are official for legacy installed systems with confirmation from the HPCG Benchmark leaders.");
      427    i                  doc.get("Final Summary")->add("After confirmation please upload results from the YAML file contents to","http://hpcg-benchmark.org");
      428                     } else {
      429    i                  doc.get("Final Summary")->add("Official results execution time (sec) must be at least",minOfficialTime);
      430                     }
      431                   }
      432                 } else {
      433             #ifdef HPCG_USE_FUSED_SYMGS_SPMV
      434                   doc.get("Final Summary")->add("HPCG result is INVALID because SYMGS and SPMV were fused. GFLOP/s rating of", totalGflops);
      435             #else
      436    i              doc.get("Final Summary")->add("HPCG result is","INVALID.");
      437             #endif
      438    i              doc.get("Final Summary")->add("Please review the YAML file contents","You may NOT submit these results for consideration.");
      439                 }
      440             
      441                 ReportInstrumentation(A, doc);
      442             
      443                 ReportEnvironment(A, doc);
      444             
      445                 std::string yaml = doc.generate();
      446             #ifdef HPCG_DEBUG
      447                 HPCG_fout << yaml;
      448             #endif
      449    i          }
      450               return;
      451             }
