Fujitsu C/C++ Version 4.7.0   Wed Nov  9 16:02:19 2022
Compilation information
  Current directory : /lustre/home/gapinzon/arm_code/HPCG_for_Arm/ookami_fj
  Source file       : ../src/ComputeRestriction.cpp
(line-no.)(optimize)
        1             //@HEADER
        2             // ***************************************************
        3             //
        4             // HPCG: High Performance Conjugate Gradient Benchmark
        5             //
        6             // Contact:
        7             // Michael A. Heroux ( maherou@sandia.gov)
        8             // Jack Dongarra     (dongarra@eecs.utk.edu)
        9             // Piotr Luszczek    (luszczek@eecs.utk.edu)
       10             //
       11             // ***************************************************
       12             //@HEADER
       13             
       14             /*!
       15               @file ComputeRestriction.cpp
       16             
       17               HPCG routine
       18               */
       19             
       20             
       21             #ifndef HPCG_NO_OPENMP
       22             #include <omp.h>
       23             #endif
       24             
       25             #include "ComputeRestriction.hpp"
       26             #include "ComputeRestriction_ref.hpp"
       27             
       28             /*!
       29               Routine to compute the coarse residual vector.
       30             
       31               @param[inout]  A - Sparse matrix object containing pointers to mgData->Axf, the fine grid matrix-vector product and mgData->rc the coarse residual vector.
       32               @param[in]    rf - Fine grid RHS.
       33             
       34             
       35               Note that the fine grid residual is never explicitly constructed.
       36               We only compute it for the fine grid points that will be injected into corresponding coarse grid points.
       37             
       38               @return Returns zero on success and a non-zero value otherwise.
       39               */
       40             int ComputeRestriction(const SparseMatrix & A, const Vector & rf) {
       41             
       42             	double * Axfv = A.mgData->Axf->values;
       43             	double * rfv = rf.values;
       44             	double * rcv = A.mgData->rc->values;
       45             	local_int_t * f2c = A.mgData->f2cOperator;
       46             	local_int_t nc = A.mgData->rc->localLength;
       47             
       48             #ifndef HPCG_NO_OPENMP
       49          s  #pragma omp parallel for
       50             #endif
       51             	for (local_int_t i=0; i<nc; ++i) {
       52    i        		rcv[A.Ac->whichNewRowIsOldRow[i]] = rfv[f2c[i]] - Axfv[f2c[i]];
       53             	}
       54             
       55             	return 0;
       56             }
