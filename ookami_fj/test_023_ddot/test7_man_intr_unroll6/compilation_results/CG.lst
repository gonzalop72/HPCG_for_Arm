Fujitsu C/C++ Version 4.7.0   Wed Nov  9 16:25:41 2022
Compilation information
  Current directory : /lustre/home/gapinzon/arm_code/HPCG_for_Arm/ookami_fj
  Source file       : ../src/CG.cpp
(line-no.)(optimize)
        1             /*
        2              *
        3              *  SPDX-License-Identifier: Apache-2.0
        4              *
        5              *  Copyright (C) 2019, Arm Limited and contributors
        6              *
        7              *  Licensed under the Apache License, Version 2.0 (the "License");
        8              *  you may not use this file except in compliance with the License.
        9              *  You may obtain a copy of the License at
       10              *
       11              *      http://www.apache.org/licenses/LICENSE-2.0
       12              *
       13              *  Unless required by applicable law or agreed to in writing, software
       14              *  distributed under the License is distributed on an "AS IS" BASIS,
       15              *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       16              *  See the License for the specific language governing permissions and
       17              *  limitations under the License.
       18              *
       19              */
       20             
       21             //@HEADER
       22             // ***************************************************
       23             //
       24             // HPCG: High Performance Conjugate Gradient Benchmark
       25             //
       26             // Contact:
       27             // Michael A. Heroux ( maherou@sandia.gov)
       28             // Jack Dongarra     (dongarra@eecs.utk.edu)
       29             // Piotr Luszczek    (luszczek@eecs.utk.edu)
       30             //
       31             // ***************************************************
       32             //@HEADER
       33             
       34             /*!
       35              @file CG.cpp
       36             
       37              HPCG routine
       38              */
       39             
       40             #include <fstream>
       41             
       42             #include <cmath>
       43             
       44             #include "hpcg.hpp"
       45             
       46             #include "CG.hpp"
       47             #include "mytimer.hpp"
       48             #include "ComputeSPMV.hpp"
       49             #include "ComputeMG.hpp"
       50             #include "ComputeDotProduct.hpp"
       51             #include "ComputeWAXPBY.hpp"
       52             
       53             // Use TICK and TOCK to time a code section in MATLAB-like fashion
       54             #define TICK()  t0 = mytimer() //!< record current time in 't0'
       55             #define TOCK(t) t += mytimer() - t0 //!< store time difference in 't' using time in 't0'
       56             
       57             #include "likwid_instrumentation.hpp"
       58             
       59             /*!
       60               Routine to compute an approximate solution to Ax = b
       61             
       62               @param[in]    geom The description of the problem's geometry.
       63               @param[inout] A    The known system matrix
       64               @param[inout] data The data structure with all necessary CG vectors preallocated
       65               @param[in]    b    The known right hand side vector
       66               @param[inout] x    On entry: the initial guess; on exit: the new approximate solution
       67               @param[in]    max_iter  The maximum number of iterations to perform, even if tolerance is not met.
       68               @param[in]    tolerance The stopping criterion to assert convergence: if norm of residual is <= to tolerance.
       69               @param[out]   niters    The number of iterations actually performed.
       70               @param[out]   normr     The 2-norm of the residual vector after the last iteration.
       71               @param[out]   normr0    The 2-norm of the residual vector before the first iteration.
       72               @param[out]   times     The 7-element vector of the timing information accumulated during all of the iterations.
       73               @param[in]    doPreconditioning The flag to indicate whether the preconditioner should be invoked at each iteration.
       74             
       75               @return Returns zero on success and a non-zero value otherwise.
       76             
       77               @see CG_ref()
       78             */
       79             int CG(const SparseMatrix & A, CGData & data, const Vector & b, Vector & x,
       80                 const int max_iter, const double tolerance, int & niters, double & normr, double & normr0,
       81                 double * times, bool doPreconditioning, TraceData& trace) {
       82             
       83               double t_begin = mytimer();  // Start timing right away
       84               normr = 0.0;
       85               double rtz = 0.0, oldrtz = 0.0, alpha = 0.0, beta = 0.0, pAp = 0.0;
       86             
       87             
       88               double t0 = 0.0, t1 = 0.0, t2 = 0.0, t3 = 0.0, t4 = 0.0, t5 = 0.0;
       89             //#ifndef HPCG_NO_MPI
       90             //  double t6 = 0.0;
       91             //#endif
       92               local_int_t nrow = A.localNumberOfRows;
       93               Vector & r = data.r; // Residual vector
       94               Vector & z = data.z; // Preconditioned residual vector
       95               Vector & p = data.p; // Direction vector (in MPI mode ncol>=nrow)
       96               Vector & Ap = data.Ap;
       97             
       98               // Reorder vectors
       99               Vector rOrdered;
      100               Vector zOrdered;
      101               Vector xOrdered;
      102    i          InitializeVector(rOrdered, r.localLength);
      103    i          InitializeVector(zOrdered, z.localLength);
      104    i          InitializeVector(xOrdered, x.localLength);
      105    i          CopyAndReorderVector(r, rOrdered, A.whichNewRowIsOldRow);
      106    i          CopyAndReorderVector(z, zOrdered, A.whichNewRowIsOldRow);
      107    i          CopyAndReorderVector(x, xOrdered, A.whichNewRowIsOldRow);
      108             
      109    i          if (!doPreconditioning && A.geom->rank==0) HPCG_fout << "WARNING: PERFORMING UNPRECONDITIONED ITERATIONS" << std::endl;
      110             
      111             #ifdef HPCG_DEBUG
      112               int print_freq = 1;
      113               if (print_freq>50) print_freq=50;
      114               if (print_freq<1)  print_freq=1;
      115             #endif
      116               // p is of length ncols, copy x to p for sparse MV operation
      117    i          CopyVector(xOrdered, p);
      118               TICK(); ComputeSPMV(A, p, Ap); TOCK(t3); // Ap = A*p
      119               TICK(); ComputeWAXPBY(nrow, 1.0, b, -1.0, Ap, rOrdered, A.isWaxpbyOptimized);  TOCK(t2); // r = b - Ax (x stored in p)
      120               TICK(); ComputeDotProduct(nrow, rOrdered, rOrdered, normr, t4, A.isDotProductOptimized); TOCK(t1);
      121               normr = sqrt(normr);
      122             #ifdef HPCG_DEBUG
      123               if (A.geom->rank==0) HPCG_fout << "Initial Residual = "<< normr << std::endl;
      124             #endif
      125             
      126               // Record initial residual for convergence testing
      127               normr0 = normr;
      128             
      129               // Start iterations
      130             
      131               for (int k=1; k<=max_iter && normr/normr0 > tolerance; k++ ) {
      132                 TICK();
      133                 if (doPreconditioning)
      134                   ComputeMG(A, rOrdered, zOrdered, trace); // Apply preconditioner
      135                 else
      136    i              CopyVector (rOrdered, zOrdered); // copy r to z (no preconditioning)
      137                 TOCK(t5); // Preconditioner apply time
      138             
      139                 if (k == 1) {
      140                   TICK(); ComputeWAXPBY(nrow, 1.0, zOrdered, 0.0, zOrdered, p, A.isWaxpbyOptimized); TOCK(t2); // Copy Mr to p
      141                   TICK(); ComputeDotProduct (nrow, rOrdered, zOrdered, rtz, t4, A.isDotProductOptimized); TOCK(t1); // rtz = r'*z
      142                 } else {
      143                   oldrtz = rtz;
      144                   TICK(); ComputeDotProduct (nrow, rOrdered, zOrdered, rtz, t4, A.isDotProductOptimized); TOCK(t1); // rtz = r'*z
      145                   beta = rtz/oldrtz;
      146                   TICK(); ComputeWAXPBY (nrow, 1.0, zOrdered, beta, p, p, A.isWaxpbyOptimized);  TOCK(t2); // p = beta*p + z
      147                 }
      148             
      149                 LIKWID_START(trace.enabled, "cg_spmv");
      150                 TICK(); ComputeSPMV(A, p, Ap); TOCK(t3); // Ap = A*p
      151                 LIKWID_STOP(trace.enabled, "cg_spmv");
      152                 TICK(); ComputeDotProduct(nrow, p, Ap, pAp, t4, A.isDotProductOptimized); TOCK(t1); // alpha = p'*Ap
      153                 alpha = rtz/pAp;
      154                 TICK(); ComputeWAXPBY(nrow, 1.0, xOrdered, alpha, p, xOrdered, A.isWaxpbyOptimized);// x = x + alpha*p
      155                         ComputeWAXPBY(nrow, 1.0, rOrdered, -alpha, Ap, rOrdered, A.isWaxpbyOptimized);  TOCK(t2);// r = r - alpha*Ap
      156                 TICK(); ComputeDotProduct(nrow, rOrdered, rOrdered, normr, t4, A.isDotProductOptimized); TOCK(t1);
      157                 normr = sqrt(normr);
      158             #ifdef HPCG_DEBUG
      159                 if (A.geom->rank==0 && (k%print_freq == 0 || k == max_iter))
      160                   HPCG_fout << "Iteration = "<< k << "   Scaled Residual = "<< normr/normr0 << std::endl;
      161             #endif
      162                 niters = k;
      163               }
      164             
      165               // Reorder back vectors
      166    i          CopyAndReorderVector(rOrdered, r, A.whichOldRowIsNewRow);
      167    i          CopyAndReorderVector(zOrdered, z, A.whichOldRowIsNewRow);
      168    i          CopyAndReorderVector(xOrdered, x, A.whichOldRowIsNewRow);
      169    i          DeleteVector(rOrdered);
      170    i          DeleteVector(zOrdered);
      171    i          DeleteVector(xOrdered);
      172             
      173               // Store times
      174               times[1] += t1; // dot-product time
      175               times[2] += t2; // WAXPBY time
      176               times[3] += t3; // SPMV time
      177               times[4] += t4; // AllReduce time
      178               times[5] += t5; // preconditioner apply time
      179             //#ifndef HPCG_NO_MPI
      180             //  times[6] += t6; // exchange halo time
      181             //#endif
      182               times[0] += mytimer() - t_begin;  // Total time. All done...
      183               return 0;
      184             }
